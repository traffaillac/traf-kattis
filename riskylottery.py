from math import prod
from itertools import product

def solve(N, M):
	wins = [{} for m in range(M)]
	for m, W in enumerate(wins):
		for numbers in product(tuple(range(M)), repeat=N-1):
			C = tuple(numbers.count(m) for m in range(M))
			if all(C[i] != 1 for i in range(m)) and C[m] == 0:
				W[C] = W.get(C, 0) + 1
	P = [1/M] * M
	while True:
		PWin = [sum(n * prod(p**c for p, c in zip(P, C)) for C, n in wins[m].items()) for m in range(M)]
		if max(PWin) - min(PWin) < 0.00001:
			break
		avg = sum(PWin) / M
		for m, pw in enumerate(PWin):
			P[m] += pw - avg
	return P

def precompute():
	solutions = {}
	for N in range(3, 8):
		for M in range(1, N+2):
			print(f"({N},{M}): {tuple(solve(N, M))},")

solutions = {
	(3,1): (1.0,),
	(3,2): (0.5, 0.5),
	(3,3): (0.464100050367793, 0.2679499748161035, 0.2679499748161035),
	(3,4): (0.457784965382229, 0.25164721732346146, 0.1452839086471548, 0.1452839086471548),
	(4,1): (1.0,),
	(4,2): (0.5, 0.5),
	(4,3): (0.4485220150431598, 0.4263227149325005, 0.12515527002434002),
	(4,4): (0.44773391846149124, 0.42486859412174555, 0.1256565784437788, 0.0017409089729839844),
	(4,5): (0.44773931007009116, 0.4248738725504534, 0.1256594463451262, 0.0017329743924233004, -5.603358093381194e-06),
	(5,1): (1.0,),
	(5,2): (0.5, 0.5),
	(5,3): (0.38165510126152025, 0.35368274072392625, 0.2646621580145533),
	(5,4): (0.3615679079519056, 0.32120238240397075, 0.19955157006632113, 0.11767813957780246),
	(5,5): (0.3581904726275427, 0.3155863033032557, 0.19182182339856366, 0.09676147752527027, 0.03763992314536743),
	(5,6): (0.3578491839524417, 0.3150168530040207, 0.19106697832546443, 0.09510744143957785, 0.03514448621733049, 0.005815057061164669),
	(6,1): (1.0,),
	(6,2): (0.5, 0.5),
	(6,3): (0.35576117412809877, 0.33868469739359724, 0.3055541284783041),
	(6,4): (0.3300874348313023, 0.30260523456014243, 0.24021548582382476, 0.12709184478473037),
	(6,5): (0.3266434371347523, 0.2975814674963506, 0.23154612638599445, 0.12260766138356148, 0.02162130759934132),
	(6,6): (0.3265690962047506, 0.297472072739706, 0.23135933148103585, 0.122497020282289, 0.021648939719987437, 0.00045353957223133456),
	(6,7): (0.326566317902345, 0.29746864843933185, 0.23135933906895262, 0.12249319418520063, 0.021640792258614164, 0.00046420909507112473, 7.499050485221259e-06),
	(7,1): (1.0,),
	(7,2): (0.5, 0.5),
	(7,3): (0.3441501172828333, 0.33481441671400236, 0.32103546600316424),
	(7,4): (0.30453884356030925, 0.2840458507881067, 0.24594324101479126, 0.1654720646367929),
	(7,5): (0.29575518003746026, 0.27210173014525785, 0.22727552232362774, 0.14348541835547246, 0.06138214913818156),
	(7,6): (0.2946115477197845, 0.270530065308645, 0.22483051301103626, 0.14081869788315, 0.05818956399968914, 0.011019612077695778),
	(7,7): (0.29457402700719815, 0.2704780697667321, 0.22474855054890508, 0.1407294038880277, 0.0580854127919867, 0.010974326565240694, 0.00041020943190933634),
	(7,8): (0.29457529888900824, 0.2704801909186714, 0.22475256384270909, 0.14073362150571964, 0.05808996229033157, 0.01098268451267563, 0.000394292678551747, -8.614637668130642e-06),
}

print('\n'.join(map(str, solutions[tuple(map(int, input().split()))])))
